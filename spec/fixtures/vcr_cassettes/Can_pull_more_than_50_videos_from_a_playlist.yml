---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=AIzaSyCXYWdWx2vQtWi9CqsJe0WT6ryiKgT6BWM&maxResults=50&part=snippet,contentDetails&playlistId=PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Tue, 07 Jul 2020 03:11:57 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-29=":443"; ma=2592000,h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443";
        ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "kind": "youtube#playlistItemListResponse",
  "etag": "BPCZhoL0ib9jMHjruuQrCcH_EoI",
  "nextPageToken": "CDIQAA",
  "items": [
    {
      "kind": "youtube#playlistItem",
      "etag": "Jzj5kPnsM1e_dznPHagFNo6GTsw",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi41NkI0NEY2RDEwNTU3Q0M2",
      "snippet": {
        "publishedAt": "2014-12-13T01:57:01Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Can We Transmit Stillness Through Technology?",
        "description": "https://www.eckharttollenow.com\n\nPresence has a place in our modern modes of communication.\n\nThis video features the music of Nawang Khechog as found on the album \"Music As Medicine\"(2004) You can sample more of the album and purchase it here: http://www.soundstrue.com/store/music-as-medicine-4561.html\n\nSubscribe to find greater fulfillment in life: \nhttps://www.youtube.com/c/eckharttolle?sub_confirmation=1\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Sg6I6_diV-k/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Sg6I6_diV-k/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Sg6I6_diV-k/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Sg6I6_diV-k/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Sg6I6_diV-k/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 0,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Sg6I6_diV-k"
        }
      },
      "contentDetails": {
        "videoId": "Sg6I6_diV-k",
        "videoPublishedAt": "2014-07-20T19:29:46Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "d9LgdFnW0_35LIM_yPi8XUYjtks",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi4yODlGNEE0NkRGMEEzMEQy",
      "snippet": {
        "publishedAt": "2014-12-13T01:57:13Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Please Comment On Western Medicine",
        "description": "https://www.eckharttollenow.com\n\nAs humanity awakens many things will change.\n\nSubscribe to find greater fulfillment in life: \nhttps://www.youtube.com/c/eckharttolle?sub_confirmation=1\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/LchpdlX_MZo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/LchpdlX_MZo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/LchpdlX_MZo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/LchpdlX_MZo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/LchpdlX_MZo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 1,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "LchpdlX_MZo"
        }
      },
      "contentDetails": {
        "videoId": "LchpdlX_MZo",
        "videoPublishedAt": "2014-05-11T18:00:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "YFpTLx8BPbHoNdrtDuXZzqfere8",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi4wMTcyMDhGQUE4NTIzM0Y5",
      "snippet": {
        "publishedAt": "2014-12-13T01:58:13Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Loving Awareness: A Conversation With Jack Kornfield",
        "description": "https://www.eckharttollenow.com\n\nEckhart Tolle speaks with renowned Buddhist meditation teacher and author Jack Kornfield about mindfulness, meditation, and the journey of awakening.\n\nSubscribe to find greater fulfillment in life: \nhttps://www.youtube.com/c/eckharttolle?sub_confirmation=1\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8GAgj_xjZvY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8GAgj_xjZvY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8GAgj_xjZvY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8GAgj_xjZvY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8GAgj_xjZvY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 2,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "8GAgj_xjZvY"
        }
      },
      "contentDetails": {
        "videoId": "8GAgj_xjZvY",
        "videoPublishedAt": "2013-12-22T03:44:57Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Lvd4KpRyQWeUpr6vDizedD_H-e0",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi41MjE1MkI0OTQ2QzJGNzNG",
      "snippet": {
        "publishedAt": "2014-12-13T01:58:13Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "I Worry About Enlightenment & Relating To Others",
        "description": "In this Question and Answer snippet, Eckhart Tolle describes an inner \"yes\" to the moment. https://www.eckharttollenow.com\n\n\nSubscribe to find greater fulfillment in life: \nhttps://www.youtube.com/c/eckharttolle?sub_confirmation=1\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/7ycvPGpMGxw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/7ycvPGpMGxw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/7ycvPGpMGxw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/7ycvPGpMGxw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/7ycvPGpMGxw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 3,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "7ycvPGpMGxw"
        }
      },
      "contentDetails": {
        "videoId": "7ycvPGpMGxw",
        "videoPublishedAt": "2013-06-18T08:15:39Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "2y8_-zqxINmxlOVe6a-Qgwrf09s",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi4wOTA3OTZBNzVEMTUzOTMy",
      "snippet": {
        "publishedAt": "2014-12-13T01:58:31Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Eckhart Tolle TV - On Conscious Business: A Dialog with Eileen Fisher",
        "description": "Eckhart speaks with visionary clothing designer Eileen Fisher about the principles and practice of conscious business.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/MT6TdlyjP3w/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/MT6TdlyjP3w/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/MT6TdlyjP3w/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/MT6TdlyjP3w/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 4,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "MT6TdlyjP3w"
        }
      },
      "contentDetails": {
        "videoId": "MT6TdlyjP3w",
        "videoPublishedAt": "2013-06-14T05:03:19Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "yXy7B56zpwp1vCNT3FXWrDAliO4",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi4xMkVGQjNCMUM1N0RFNEUx",
      "snippet": {
        "publishedAt": "2014-12-13T01:58:53Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Vigilance",
        "description": "https://www.eckharttollenow.com\n\nAn inspirational talk on the faculty that Eckhart Tolle calls vigilance and its role in transforming consciousness.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/zxCLudQvmuA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/zxCLudQvmuA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/zxCLudQvmuA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/zxCLudQvmuA/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 5,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "zxCLudQvmuA"
        }
      },
      "contentDetails": {
        "videoId": "zxCLudQvmuA",
        "videoPublishedAt": "2013-03-11T13:57:46Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "5HFGew71OlkM_9GbQePJORQWvpo",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi41MzJCQjBCNDIyRkJDN0VD",
      "snippet": {
        "publishedAt": "2014-12-13T01:59:17Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Private video",
        "description": "This video is private.",
        "thumbnails": {},
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 6,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "b4046XSuaqs"
        }
      },
      "contentDetails": {
        "videoId": "b4046XSuaqs"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "kFR8wEPddKPmHLqaI5GuICKumXM",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi5DQUNERDQ2NkIzRUQxNTY1",
      "snippet": {
        "publishedAt": "2014-12-13T02:00:28Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Are The Paths To Spirituality And Wealth Mutually Exclusive?",
        "description": "https://www.eckharttollenow.com\n\nA teaching about non-attached appreciation.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/wH6FdFiUueU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/wH6FdFiUueU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/wH6FdFiUueU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/wH6FdFiUueU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/wH6FdFiUueU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 7,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "wH6FdFiUueU"
        }
      },
      "contentDetails": {
        "videoId": "wH6FdFiUueU",
        "videoPublishedAt": "2012-05-01T21:53:30Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "xjuSYqvKwziA5m537tdRxalJVvQ",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi45NDk1REZENzhEMzU5MDQz",
      "snippet": {
        "publishedAt": "2014-12-13T02:01:18Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "What Role Does \"Service To Others\" Play In The Evolutionary Impulse?",
        "description": "https://www.eckharttollenow.com\n\nEckhart Tolle reminds us that if Presence is arising within us, we cannot help but be of service. How that manifests will be unique for each of us.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/WxhSW29nSwk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/WxhSW29nSwk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/WxhSW29nSwk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/WxhSW29nSwk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/WxhSW29nSwk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 8,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "WxhSW29nSwk"
        }
      },
      "contentDetails": {
        "videoId": "WxhSW29nSwk",
        "videoPublishedAt": "2012-05-01T04:30:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "myfCdDjqaUv1cCYUj6zRHj5QKHQ",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi5GNjNDRDREMDQxOThCMDQ2",
      "snippet": {
        "publishedAt": "2014-12-13T02:02:42Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "How Can A Movement That Is Inwardly Focused Demonstrate Political Power?",
        "description": "https://www.eckharttollenow.com\n\nQA Sample: Marianne Williamson shares powerful examples of the many triumphs of non-violent movements in recent history.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/23_gu_WlnAY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/23_gu_WlnAY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/23_gu_WlnAY/hqdefault.jpg",
            "width": 480,
            "height": 360
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 9,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "23_gu_WlnAY"
        }
      },
      "contentDetails": {
        "videoId": "23_gu_WlnAY",
        "videoPublishedAt": "2011-10-03T10:51:41Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "uR5-wxSUXA9Sv8XdQmvzMRwwTW0",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi40NzZCMERDMjVEN0RFRThB",
      "snippet": {
        "publishedAt": "2014-12-13T02:05:14Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Midwifing The New Consciousness: A Dialogue With Marianne Williamson",
        "description": "https://www.eckharttollenow.com\n\nEckhart Tolle talks with internationally known spiritual teacher and bestselling author Marianne Williamson about the possibilities of individual and planetary awakening.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ab0p1kXzkLg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ab0p1kXzkLg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ab0p1kXzkLg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ab0p1kXzkLg/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 10,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ab0p1kXzkLg"
        }
      },
      "contentDetails": {
        "videoId": "ab0p1kXzkLg",
        "videoPublishedAt": "2011-10-03T10:12:45Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "aaxQG3-5RZSnW43G5VTovni5hQw",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi5EMEEwRUY5M0RDRTU3NDJC",
      "snippet": {
        "publishedAt": "2014-12-13T02:05:14Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Jim Carrey Discusses The Mainstream Media",
        "description": "https://www.eckharttollenow.com\n\nJim Carrey discusses the negative influence and inaccurate portrayal of our world situation by the mainstream media. \"It's not representative of what the world is, or what the world wants.\" Recorded at the 2009 Inaugural GATE Event (Global Alliance for Transformational Entertainment) Video was Shot and Produced by Eckhart Tolle TV. Eckhart Tolle TV is an online video network offering of transformational video content featuring Eckhart Tolle & Kim Eng.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/nrmOgE7ESLU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/nrmOgE7ESLU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/nrmOgE7ESLU/hqdefault.jpg",
            "width": 480,
            "height": 360
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 11,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "nrmOgE7ESLU"
        }
      },
      "contentDetails": {
        "videoId": "nrmOgE7ESLU",
        "videoPublishedAt": "2010-01-24T01:07:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "spPBrypT2QYgLVE5LPnVKrBBPO8",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi45ODRDNTg0QjA4NkFBNkQy",
      "snippet": {
        "publishedAt": "2014-12-13T02:05:14Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "An Introduction to EckhartTolle TV (HD)",
        "description": "http://enter.eckharttolle.com\r\n\r\nVisit EckartTolle.com for more information about EckartTolle.tv",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/SUkFibYW2Gs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/SUkFibYW2Gs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/SUkFibYW2Gs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/SUkFibYW2Gs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/SUkFibYW2Gs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 12,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "SUkFibYW2Gs"
        }
      },
      "contentDetails": {
        "videoId": "SUkFibYW2Gs",
        "videoPublishedAt": "2009-01-16T09:56:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ws9JiXW-oHtWFozOedhY1jxtrgY",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi4zMDg5MkQ5MEVDMEM1NTg2",
      "snippet": {
        "publishedAt": "2014-12-13T02:05:55Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "What Is My Responsibility?",
        "description": "Is the desire to take personal responsibility for things in life purely ego-based? In response to this important question from one of our members, Eckhart Tolle reminds us that it is our state of consciousness in any given moment that creates the world we see around us. https://www.eckharttollenow.com\n\nSubscribe to find greater fulfillment in life: \nhttps://www.youtube.com/c/eckharttolle?sub_confirmation=1\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/1DgPaoObetE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/1DgPaoObetE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/1DgPaoObetE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/1DgPaoObetE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/1DgPaoObetE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 13,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "1DgPaoObetE"
        }
      },
      "contentDetails": {
        "videoId": "1DgPaoObetE",
        "videoPublishedAt": "2009-08-28T04:26:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "QE7dt83fZ9SChHpxQFCvN0Bnk1g",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi41Mzk2QTAxMTkzNDk4MDhF",
      "snippet": {
        "publishedAt": "2014-12-14T12:42:49Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "I Have A Desire To Share My Realization",
        "description": "https://www.eckharttollenow.com\n\nIn this preview clip, Eckhart Tolle discusses how we can only teach what we know for ourselves.\n\nThis video features the music of Nawang Khechog as found on the album \"Music As Medicine\"(2004) You can sample more of the album and purchase it here: http://www.soundstrue.com/store/music-as-medicine-4561.html\n\nSubscribe to find greater fulfillment in life: \nhttps://www.youtube.com/c/eckharttolle?sub_confirmation=1\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/MUCx5H48AwM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/MUCx5H48AwM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/MUCx5H48AwM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/MUCx5H48AwM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/MUCx5H48AwM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 14,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "MUCx5H48AwM"
        }
      },
      "contentDetails": {
        "videoId": "MUCx5H48AwM",
        "videoPublishedAt": "2014-12-14T13:03:52Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "7TcHE6pFFESPKunkVsvEh0Jd71k",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi5EQUE1NTFDRjcwMDg0NEMz",
      "snippet": {
        "publishedAt": "2015-05-27T23:00:56Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "What Part Does Willpower Play In Awakening?",
        "description": "https://www.eckharttollenow.com\n\nLittle to no part; instead, surrender to the moment. To watch this video on our website, go to http://www.eckharttolletv.com/video23\n\nSubscribe to find greater fulfillment in life: \nhttps://www.youtube.com/c/eckharttolle?sub_confirmation=1\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/unUJPFYjhEQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/unUJPFYjhEQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/unUJPFYjhEQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/unUJPFYjhEQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/unUJPFYjhEQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 15,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "unUJPFYjhEQ"
        }
      },
      "contentDetails": {
        "videoId": "unUJPFYjhEQ",
        "videoPublishedAt": "2015-05-27T23:21:38Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "0bWKjm-Gv8fYRcjC54aX71o2jo4",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi41QTY1Q0UxMTVCODczNThE",
      "snippet": {
        "publishedAt": "2015-08-08T09:11:53Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "How Can We Address Our Ecological Situation?",
        "description": "https://www.eckharttollenow.com\n\nBegin with a peaceful heart and stay present.\n\nSubscribe to find greater fulfillment in life: \nhttps://www.youtube.com/c/eckharttolle?sub_confirmation=1\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/4aEVAnFXOSg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/4aEVAnFXOSg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/4aEVAnFXOSg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/4aEVAnFXOSg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/4aEVAnFXOSg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 16,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "4aEVAnFXOSg"
        }
      },
      "contentDetails": {
        "videoId": "4aEVAnFXOSg",
        "videoPublishedAt": "2015-08-10T09:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "y43UyQLbZuqMBi74GfO4DlXCius",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi4yMUQyQTQzMjRDNzMyQTMy",
      "snippet": {
        "publishedAt": "2016-02-08T08:42:17Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "How Can We Support Others?",
        "description": "https://www.eckharttollenow.com\n\nIn this Question and Answer session, Eckhart Tolle provides guidance in becoming “an opening for consciousness.”\n\nWatch the video on our website by clicking here: https://www.eckharttollenow.com/video37\n\nSubscribe to find greater fulfillment in life: \nhttps://www.youtube.com/c/eckharttolle?sub_confirmation=1\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/dP7a8aIfDaY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/dP7a8aIfDaY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/dP7a8aIfDaY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/dP7a8aIfDaY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/dP7a8aIfDaY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 17,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "dP7a8aIfDaY"
        }
      },
      "contentDetails": {
        "videoId": "dP7a8aIfDaY",
        "videoPublishedAt": "2016-02-17T12:00:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "SI6PTBrw31eMDKO3dRTpw8GCpaM",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi45RTgxNDRBMzUwRjQ0MDhC",
      "snippet": {
        "publishedAt": "2016-02-08T09:03:15Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "How Do You Deal With Unconscious People?",
        "description": "https://www.eckharttollenow.com\n\nIn this Question and Answer session, Eckhart Tolle explains how unconscious people can serve as helpers to deepen your own presence. \n\nWatch the video on our website by clicking here: https://www.eckharttollenow.com/video39\n\nSubscribe to find greater fulfillment in life: \nhttps://www.youtube.com/c/eckharttolle?sub_confirmation=1\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/lqr98O8QT3M/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/lqr98O8QT3M/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/lqr98O8QT3M/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/lqr98O8QT3M/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/lqr98O8QT3M/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 18,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "lqr98O8QT3M"
        }
      },
      "contentDetails": {
        "videoId": "lqr98O8QT3M",
        "videoPublishedAt": "2016-02-19T12:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Vi5iIcBFkJQttnXAmQonD9uX02A",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi5ENDU4Q0M4RDExNzM1Mjcy",
      "snippet": {
        "publishedAt": "2016-04-25T06:22:46Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "When You Felt Despair Would One Like You Have Helped?",
        "description": "https://www.eckharttollenow.com\n\nOverview: Suffering is a universal teacher. Watch the video on our website by clicking here: https://www.eckharttollenow.com/video51\n\nSubscribe to find greater fulfillment in life: \nhttps://www.youtube.com/c/eckharttolle?sub_confirmation=1\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/28p6pmmj1iQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/28p6pmmj1iQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/28p6pmmj1iQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/28p6pmmj1iQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/28p6pmmj1iQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 19,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "28p6pmmj1iQ"
        }
      },
      "contentDetails": {
        "videoId": "28p6pmmj1iQ",
        "videoPublishedAt": "2016-04-27T11:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Dwzk1NDXhLhyTeiIbjnvo3aR73w",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi4yMDhBMkNBNjRDMjQxQTg1",
      "snippet": {
        "publishedAt": "2018-09-17T18:31:59Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Eckhart Teaches a Young Man - Full Length Movie",
        "description": "In 2005, Eckhart was interview by 23 year-old actor Sean A. Mulvihill for the documentary film, \"Living Luminaries: On the Serious Business of Happiness.\"  In the two-day interview session, Eckhart taught on dozens of topics affecting Sean, a young man finding his way in the world.  In this 98 minute video, Eckhart touches on how to deal with illness and loss; how to navigate romantic relationships; how to achieve things in the world without getting lost in them; and Eckhart gives some insight into how he lived after his awakening but before he wrote The Power of Now.  \n\nThe full documentary film which features Eckhart's interview can be seen at  http://www.livingluminaries.com\n\nWhere is Sean (the guy who interviewed Eckhart in this video) now?  You can hear him talk about how his interview with Eckhart Tolle changed his life here: https://youtu.be/U3KLDz6sNvg\n\n********************************************************\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now (www.eckharttollenow). You'll get:\n\n* Access to over 200+ hours of teachings from Eckhart and his teaching partner Kim Eng \n\n* The Eckhart Tolle mobile app to connect from anywhere \n\n* Support from a worldwide community of like minded people\n\nVisit www.eckharttollenow.com to start your free trial today.\n\n***********************************************************************\n\nConnect with Eckhart Tolle On Social Media:\n\nhttps://www.facebook.com/Eckharttolle\nhttps://twitter.com/EckhartTolle\nhttps://www.instagram.com/eckharttolle\n\n© 2018 Eckhart Tolle, Eckhart Tolle Teachings, Inc. All Rights Reserved.\n\n***************************************************************\n\nCredits:\nWith Eckhart Tolle and Sean A. Mulvihill \nAlso featuring Kim Eng\nDirected by Larry Kurnarsky\nProducers: Michael Lasky, Gene and Arlene Sloan, Ellie Partovi, and Sean A. Mulvihill\nCinematography by Keith Holland\nFunded by Wanna Be Now, LLC\nFilmed in Vancouver, BC",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/eGH6sdODcOw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/eGH6sdODcOw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/eGH6sdODcOw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/eGH6sdODcOw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/eGH6sdODcOw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 20,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "eGH6sdODcOw"
        }
      },
      "contentDetails": {
        "videoId": "eGH6sdODcOw",
        "videoPublishedAt": "2018-04-29T18:15:50Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "UequMJCrTIbLlfJtj63IgxPS3BY",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi5GM0Q3M0MzMzY5NTJFNTdE",
      "snippet": {
        "publishedAt": "2018-09-17T18:38:51Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "What Really Matters",
        "description": "Unwind, relax, and deepen into the present moment. In this powerful video montage, Eckhart takes us on the journey of understanding and feeling one of his most essential teachings: The Power of Now. As we listen to Eckhart's words and enjoy the beautiful imagery, we are reminded that what's truly important, is already here. \n\n***********************************************************************\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now (www.eckharttollenow). You'll get:\n\n* Access to over 200+ hours of teachings from Eckhart and his teaching partner Kim Eng \n\n* The Eckhart Tolle mobile app to connect from anywhere \n\n* Support from a worldwide community of like minded people\n\nVisit www.eckharttollenow.com to start your free trial today.\n\n***********************************************************************\n\nConnect with Eckhart Tolle On Social Media:\n\nhttps://www.facebook.com/Eckharttolle\nhttps://twitter.com/EckhartTolle\nhttps://www.instagram.com/eckharttolle\n\n© 2018 Eckhart Tolle, Eckhart Tolle Teachings, Inc. All Rights Reserved.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/brtP2IgnZzs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/brtP2IgnZzs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/brtP2IgnZzs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/brtP2IgnZzs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/brtP2IgnZzs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 21,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "brtP2IgnZzs"
        }
      },
      "contentDetails": {
        "videoId": "brtP2IgnZzs",
        "videoPublishedAt": "2018-03-29T19:49:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "gPnw-N7jHUjGFckWDSIt9hcs224",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi4zRjM0MkVCRTg0MkYyQTM0",
      "snippet": {
        "publishedAt": "2018-09-17T18:39:51Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "What Do I Do When My Partner Isn't Awake Spiritually?",
        "description": "Our ability to relate peacefully with an unconscious partner depends greatly on the level of their unconsciousness and how it manifests. \n\n***********************************************************************\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now (www.eckharttollenow). You'll get:\n\n* Access to over 200+ hours of teachings from Eckhart and his teaching partner Kim Eng \n\n* The Eckhart Tolle mobile app to connect from anywhere \n\n* Support from a worldwide community of like minded people\n\nVisit www.eckharttollenow.com to start your free trial today.\n\n***********************************************************************\n\nConnect with Eckhart Tolle On Social Media:\n\nhttps://www.facebook.com/Eckharttolle\nhttps://twitter.com/EckhartTolle\nhttps://www.instagram.com/eckharttolle\n\n© 2018 Eckhart Tolle, Eckhart Tolle Teachings, Inc. All Rights Reserved.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ZUbcCnGrkrw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ZUbcCnGrkrw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ZUbcCnGrkrw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ZUbcCnGrkrw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ZUbcCnGrkrw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 22,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ZUbcCnGrkrw"
        }
      },
      "contentDetails": {
        "videoId": "ZUbcCnGrkrw",
        "videoPublishedAt": "2018-03-22T03:04:17Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "b_6iVmu0Sbal8026tyTpeipDFcg",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi45NzUwQkI1M0UxNThBMkU0",
      "snippet": {
        "publishedAt": "2018-09-17T18:43:55Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Staying Present",
        "description": "Staying present is an ongoing practice, explains Eckhart, which can be supported in ways that include following the breath, becoming aware of sensations in the body, and by cultivating \"the Observer.\"\n\n***********************************************************************\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now (www.eckharttollenow). You'll get:\n\n* Access to over 200+ hours of teachings from Eckhart and his teaching partner Kim Eng \n\n* The Eckhart Tolle mobile app to connect from anywhere \n\n* Support from a worldwide community of like minded people\n\nVisit www.eckharttollenow.com to start your free trial today.\n\n***********************************************************************\n\nConnect with Eckhart Tolle On Social Media:\n\nhttps://www.facebook.com/Eckharttolle\nhttps://twitter.com/EckhartTolle\nhttps://www.instagram.com/eckharttolle\n\n© 2018 Eckhart Tolle, Eckhart Tolle Teachings, Inc. All Rights Reserved.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/0sKKubwN4vM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/0sKKubwN4vM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/0sKKubwN4vM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/0sKKubwN4vM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/0sKKubwN4vM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 23,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "0sKKubwN4vM"
        }
      },
      "contentDetails": {
        "videoId": "0sKKubwN4vM",
        "videoPublishedAt": "2018-03-15T05:11:09Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "BDe1twyUTgkh2B6hsCM8moOLeAk",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi5DNzE1RjZEMUZCMjA0RDBB",
      "snippet": {
        "publishedAt": "2018-09-17T18:47:17Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Breaking Addiction to Negative Thinking",
        "description": "Becoming aware of negative thinking is the first step in breaking one's addiction to it, teaches Eckhart.\n\n***********************************************************************\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now (www.eckharttollenow). You'll get:\n\n* Access to over 200+ hours of teachings from Eckhart and his teaching partner Kim Eng \n\n* The Eckhart Tolle mobile app to connect from anywhere \n\n* Support from a worldwide community of like minded people\n\nVisit www.eckharttollenow.com to start your free trial today.\n\n***********************************************************************\n\nConnect with Eckhart Tolle On Social Media:\n\nhttps://www.facebook.com/Eckharttolle\nhttps://twitter.com/EckhartTolle\nhttps://www.instagram.com/eckharttolle\n\n© 2018 Eckhart Tolle, Eckhart Tolle Teachings, Inc. All Rights Reserved.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/j91ST2gtR44/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/j91ST2gtR44/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/j91ST2gtR44/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/j91ST2gtR44/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/j91ST2gtR44/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 24,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "j91ST2gtR44"
        }
      },
      "contentDetails": {
        "videoId": "j91ST2gtR44",
        "videoPublishedAt": "2018-02-19T02:48:06Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "LqR_gwT3nEYDmrxTggAaD9fsDjA",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi43MTI1NDIwOTMwQjIxMzNG",
      "snippet": {
        "publishedAt": "2018-09-20T02:02:20Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Decoding The Power of Now",
        "description": "Eckhart explains what he means by the “power of now” and how tapping into the underlying consciousness of the universe is a way we can experience that power.\n\n***********************************************************************\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now (www.eckharttollenow). You'll get:\n\n* Access to over 200+ hours of teachings from Eckhart and his teaching partner Kim Eng \n\n* The Eckhart Tolle mobile app to connect from anywhere \n\n* Support from a worldwide community of like minded people\n\nVisit www.eckharttollenow.com to start your free trial today.\n\n***********************************************************************\n\nConnect with Eckhart Tolle On Social Media:\n\nhttps://www.facebook.com/Eckharttolle\nhttps://twitter.com/EckhartTolle\nhttps://www.instagram.com/eckharttolle\n\n© 2017 Eckhart Tolle, Eckhart Tolle Teachings, Inc. All Rights Reserved.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/2uXm65gtyAA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/2uXm65gtyAA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/2uXm65gtyAA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/2uXm65gtyAA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/2uXm65gtyAA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 25,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "2uXm65gtyAA"
        }
      },
      "contentDetails": {
        "videoId": "2uXm65gtyAA",
        "videoPublishedAt": "2017-12-26T23:23:17Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "wRnPwe31RoLJivb0kUWS7mrzRyY",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi5DQ0MyQ0Y4Mzg0M0VGOEYw",
      "snippet": {
        "publishedAt": "2018-09-20T03:35:58Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Searching for Happiness?",
        "description": "Eckhart advises giving up the search for happiness and instead focusing on the present moment and your own deepening Presence.\n\n***********************************************************************\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now (www.eckharttollenow). You'll get:\n\n* Access to over 200+ hours of teachings from Eckhart and his teaching partner Kim Eng \n\n* The Eckhart Tolle mobile app to connect from anywhere \n\n* Support from a worldwide community of like minded people\n\nVisit www.eckharttollenow.com to start your free trial today.\n\n***********************************************************************\n\nConnect with Eckhart Tolle On Social Media:\n\nhttps://www.facebook.com/Eckharttolle\nhttps://twitter.com/EckhartTolle\nhttps://www.instagram.com/eckharttolle\n\n© 2017 Eckhart Tolle, Eckhart Tolle Teachings, Inc. All Rights Reserved.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/7tAVhKfcs6A/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/7tAVhKfcs6A/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/7tAVhKfcs6A/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/7tAVhKfcs6A/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/7tAVhKfcs6A/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 26,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "7tAVhKfcs6A"
        }
      },
      "contentDetails": {
        "videoId": "7tAVhKfcs6A",
        "videoPublishedAt": "2017-09-14T17:01:36Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "2wyuCm0s9x_XLCAFYUO9befnvO4",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi4yQUE2Q0JEMTk4NTM3RTZC",
      "snippet": {
        "publishedAt": "2018-09-20T03:41:26Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Why Presence Matters - With French Subtitles",
        "description": "In this video Eckhart Tolle discusses how presence is the arising of a dimension of consciousness from where you can become aware that there is a voice in your head. For human beings, he explains, to discover this dimension within themselves is extraordinarily important. \n\n***********************************************************************\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now (www.eckharttollenow). You'll get:\n\n* Access to over 200+ hours of teachings from Eckhart and his teaching partner Kim Eng \n\n* The Eckhart Tolle mobile app to connect from anywhere \n\n* Support from a worldwide community of like minded people\n\nVisit www.eckharttollenow.com to start your free trial today.\n\n***********************************************************************\n\nConnect with Eckhart Tolle On Social Media:\n\nhttps://www.facebook.com/Eckharttolle\nhttps://twitter.com/EckhartTolle\nhttps://www.instagram.com/eckharttolle\n\n© 2017 Eckhart Tolle, Eckhart Tolle Teachings, Inc. All Rights Reserved.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/GC6fCHfkUUo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/GC6fCHfkUUo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/GC6fCHfkUUo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/GC6fCHfkUUo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/GC6fCHfkUUo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 27,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "GC6fCHfkUUo"
        }
      },
      "contentDetails": {
        "videoId": "GC6fCHfkUUo",
        "videoPublishedAt": "2017-09-14T16:49:26Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "5ECWAF0uOgtjGyRgMwhZ8q7Yf14",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi5DMkU4NTY1QUFGQTYwMDE3",
      "snippet": {
        "publishedAt": "2018-09-20T03:57:26Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "The Journey Of Awakening",
        "description": "Speaking in Belfast, Ireland, Eckhart Tolle traces the awakening of human consciousness from the inception of the ego to life after the realization of our essential nature.\n\nhttps://www.eckharttollenow.com\n\nSubscribe to find greater fulfillment in life: \nhttps://www.youtube.com/c/eckharttolle?sub_confirmation=1\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/XgFugIfRlp0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/XgFugIfRlp0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/XgFugIfRlp0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/XgFugIfRlp0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/XgFugIfRlp0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 28,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "XgFugIfRlp0"
        }
      },
      "contentDetails": {
        "videoId": "XgFugIfRlp0",
        "videoPublishedAt": "2016-05-17T23:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "kwaJynG74hZPNrmZmKcTa6uvvZk",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi44Mjc5REFBRUE2MTdFRDU0",
      "snippet": {
        "publishedAt": "2018-09-21T03:21:51Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Awakening From Self-Talk",
        "description": "https://www.eckharttollenow.com\n\nAustralia Retreat Part One: Eckhart Tolle discusses the shift in consciousness from our ordinary “surface-level” perspective to a deeper awareness that transcends the personal sense of identity.\n\nSubscribe to find greater fulfillment in life: \nhttps://www.youtube.com/c/eckharttolle?sub_confirmation=1\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Y6dsnjSzyhE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Y6dsnjSzyhE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Y6dsnjSzyhE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Y6dsnjSzyhE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Y6dsnjSzyhE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 29,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Y6dsnjSzyhE"
        }
      },
      "contentDetails": {
        "videoId": "Y6dsnjSzyhE",
        "videoPublishedAt": "2015-11-26T08:24:43Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "BgzQIFH3WU3IerSOczyAIRP7x7w",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi43NDhFRTgwOTRERTU4Rjg3",
      "snippet": {
        "publishedAt": "2018-09-21T04:48:34Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Through The Eyes Of Krishnamurti",
        "description": "https://www.eckharttollenow.com\n\nEckhart Tolle discusses selections from the revered teacher's classic journal and shares some of the profound \"passages into stillness\" that Krishnamurti opens for us.\n\nSubscribe to find greater fulfillment in life: \nhttps://www.youtube.com/c/eckharttolle?sub_confirmation=1\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/5Y2yOZGgHuY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/5Y2yOZGgHuY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/5Y2yOZGgHuY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/5Y2yOZGgHuY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/5Y2yOZGgHuY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 30,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "5Y2yOZGgHuY"
        }
      },
      "contentDetails": {
        "videoId": "5Y2yOZGgHuY",
        "videoPublishedAt": "2014-02-13T19:17:19Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "-pdGO12IbJOu_MZ0aGIpqQqAybQ",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi41QUZGQTY5OTE4QTREQUU4",
      "snippet": {
        "publishedAt": "2018-11-21T03:05:28Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Do I Cause My Own Suffering?",
        "description": "Do humans bring about their own suffering? Eckhart shares that economic structures are a reflection of the collective state of consciousness in humans, which is still largely rooted in the ego. \n\nWhen structures created out of ego dissolve, the result is suffering. The good news: it is possible to use suffering as a call for wider awakening in the world.\n\nSubscribe to find greater fulfillment in life: \nhttps://www.youtube.com/c/eckharttolle?sub_confirmation=1\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/yEH_3GyfIag/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/yEH_3GyfIag/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/yEH_3GyfIag/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/yEH_3GyfIag/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/yEH_3GyfIag/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 31,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "yEH_3GyfIag"
        }
      },
      "contentDetails": {
        "videoId": "yEH_3GyfIag",
        "videoPublishedAt": "2018-11-21T17:00:17Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "wSH9qgE1Rd7x6YLXIaKmRZVeyuU",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi4zRDBDOEZDOUM0MDY5NEEz",
      "snippet": {
        "publishedAt": "2019-03-29T23:33:27Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Is The State of Presence Devoid of Emotional Content?",
        "description": "Emotions and thoughts can certainly arise while we are in a state of Presence. The key is to hold the space for them without getting lost in the mind stream.\n\nSubscribe to find greater fulfillment in life: \nhttps://www.youtube.com/c/eckharttolle?sub_confirmation=1\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/QBDlW3H5ZQQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/QBDlW3H5ZQQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/QBDlW3H5ZQQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/QBDlW3H5ZQQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/QBDlW3H5ZQQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 32,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "QBDlW3H5ZQQ"
        }
      },
      "contentDetails": {
        "videoId": "QBDlW3H5ZQQ",
        "videoPublishedAt": "2019-03-30T00:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "J5MTV5kOydTW0szQ3tMDNKucLOs",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi5CMEQ2Mjk5NTc3NDZFRUNB",
      "snippet": {
        "publishedAt": "2019-04-05T21:37:28Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Shouldn’t We Live As Simply As Possible",
        "description": "Eckhart discusses spiritual awakening as it relates to two aspects of life: the acquisition of things, and the activities we engage in. Liberation, he explains, depends upon your inner relationship to what you have or do.\n\nSubscribe to find greater fulfillment in life: \nhttps://www.youtube.com/c/eckharttolle?sub_confirmation=1\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/IGieKbdtN9Q/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/IGieKbdtN9Q/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/IGieKbdtN9Q/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/IGieKbdtN9Q/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/IGieKbdtN9Q/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 33,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "IGieKbdtN9Q"
        }
      },
      "contentDetails": {
        "videoId": "IGieKbdtN9Q",
        "videoPublishedAt": "2019-04-05T22:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "7LNP1pNYoHIWZyj2H4GfA8VY1-Q",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi42MTI4Njc2QjM1RjU1MjlG",
      "snippet": {
        "publishedAt": "2019-04-23T23:39:58Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "What Is Self? Timeless Wisdom From The Archives",
        "description": "Eckhart describes the illusory self that is identified solely with the unobserved mind, versus the potentially deeper meaning of the word “you”—as formless consciousness itself.\n\nSubscribe to find greater fulfillment in life: \nhttps://www.youtube.com/c/eckharttolle?sub_confirmation=1\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/fPs510TWiOw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/fPs510TWiOw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/fPs510TWiOw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/fPs510TWiOw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/fPs510TWiOw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 34,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "fPs510TWiOw"
        }
      },
      "contentDetails": {
        "videoId": "fPs510TWiOw",
        "videoPublishedAt": "2019-04-24T13:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "r0CSTI2GmRdaDKJum3u7EhVgBYM",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi45RjNFMDhGQ0Q2RkFCQTc1",
      "snippet": {
        "publishedAt": "2019-05-15T03:59:38Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Essential Life Practices",
        "description": "As human beings, we evolve through life’s challenges and suffering, not through avoidance. In this teaching, Eckhart explains the essential everyday practices to awaken Presence and overcome suffering. Subscribe to find greater fulfillment in life: https://www.youtube.com/c/eckharttolle?sub_confirmation=1\n\nThese practices include body awareness, incorporating spaciousness, breath awareness, approaching sense perceptions without labels, and a host of other simple techniques that anchor us in the present moment. \n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/g-obCFtAJwU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/g-obCFtAJwU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/g-obCFtAJwU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/g-obCFtAJwU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/g-obCFtAJwU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 35,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "g-obCFtAJwU"
        }
      },
      "contentDetails": {
        "videoId": "g-obCFtAJwU",
        "videoPublishedAt": "2019-05-15T14:00:05Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "X72n_vZhknpEFS7u5aPYycuLUg8",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi40QTA3NTU2RkM1QzlCMzYx",
      "snippet": {
        "publishedAt": "2019-05-22T01:40:13Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Choosing To Live Through Presence",
        "description": "In this presentation given on retreat at Lake Louise, Canada, Eckhart considers how the gradual realization of Presence affects a person's day-to-day experience. Touching on the inherent self-defeat of labeling oneself \"enlightened,\" how to cut through problems with \"the sword of Presence,\" and the end of suffering, Eckhart explains that most experiences of spiritual awakening don't arrive in a single, decisive moment.\n\nSubscribe to find greater fulfillment in life: \nhttps://www.youtube.com/c/eckharttolle?sub_confirmation=1\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ZONcYcEmLQg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ZONcYcEmLQg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ZONcYcEmLQg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ZONcYcEmLQg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ZONcYcEmLQg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 36,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ZONcYcEmLQg"
        }
      },
      "contentDetails": {
        "videoId": "ZONcYcEmLQg",
        "videoPublishedAt": "2019-05-22T12:00:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "TN159ec6i_Xu8UPhqMQrJbXhceY",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi5BRjJDODk5REM0NjkzMUIy",
      "snippet": {
        "publishedAt": "2019-05-31T00:57:24Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "The Evolution Of Awareness: A Conversation With Neale Donald Walsch",
        "description": "A moving dialogue on topics including Neale Donald Walsch's personal story, his creative process, the challenge of staying spiritually awake in daily living, and more. Subscribe to find greater fulfillment in life: \nhttps://www.youtube.com/c/eckharttolle?sub_confirmation=1\n\n\"That is the real spiritual awakening, when something emerges from within you that is deeper than who you thought you were. So, the person is still there, but one could almost say that something more powerful shines through the person.\" -Eckhart Tolle\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! https://www.youtube.com/channel/UCj9fPezLH1HUh7mSo-tB1Mg/join\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/AmhaifwrPCs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/AmhaifwrPCs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/AmhaifwrPCs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/AmhaifwrPCs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/AmhaifwrPCs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 37,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "AmhaifwrPCs"
        }
      },
      "contentDetails": {
        "videoId": "AmhaifwrPCs",
        "videoPublishedAt": "2019-05-29T13:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "xBItFMYPg_psArqi9yGYk3QySxs",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi4xOTEzQzhBQzU3MDNDNjcz",
      "snippet": {
        "publishedAt": "2019-06-05T02:24:23Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "The Ultimate Source of Wisdom and Balance",
        "description": "In this featured talk, Eckhart guides us from the troublesome \"waiting room\" of our modern lives, pointing us to the depths of the present moment as both our true home and the ultimate source of wisdom and balance. Subscribe to find greater fulfillment in life: \nhttp://bit.ly/EckhartYT\n\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/-ptJ8UCbDGQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/-ptJ8UCbDGQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/-ptJ8UCbDGQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/-ptJ8UCbDGQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/-ptJ8UCbDGQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 38,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "-ptJ8UCbDGQ"
        }
      },
      "contentDetails": {
        "videoId": "-ptJ8UCbDGQ",
        "videoPublishedAt": "2019-06-05T15:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "_BlJ5pVB8JhUBWg6BBS5CtWAI90",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi5GNDg1Njc1QzZERjlFRjE5",
      "snippet": {
        "publishedAt": "2019-06-13T02:09:40Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Managing Money and Awakening: Eckhart Tolle with Geneen Roth",
        "description": "Eckhart speaks with Geneen Roth about her awakening process and her evolving relationship between money and wealth. Subscribe to find greater fulfillment in life: http://bit.ly/EckhartYT\n\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/eFny-VzGz_I/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/eFny-VzGz_I/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/eFny-VzGz_I/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/eFny-VzGz_I/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/eFny-VzGz_I/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 39,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "eFny-VzGz_I"
        }
      },
      "contentDetails": {
        "videoId": "eFny-VzGz_I",
        "videoPublishedAt": "2019-06-13T11:00:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Se_Y1L7tAutNNZE-RqSjpgEuOfk",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi4zQzFBN0RGNzNFREFCMjBE",
      "snippet": {
        "publishedAt": "2019-07-09T05:48:16Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Relinquishing Thought and Death of The Ego",
        "description": "Let's step out of thought and into presence. Without thought ego immediately dissolves. Eckhart prefaces this month’s questions with a critical reminder about relinquishing thought. Subscribe to find greater fulfillment in life: http://bit.ly/EckhartYT\n\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/MO3hK5YabqA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/MO3hK5YabqA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/MO3hK5YabqA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/MO3hK5YabqA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/MO3hK5YabqA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 40,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "MO3hK5YabqA"
        }
      },
      "contentDetails": {
        "videoId": "MO3hK5YabqA",
        "videoPublishedAt": "2019-07-09T13:00:03Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "-2tUsu0lfSVvgXjh5AwdiBp1Hm8",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi45NkVENTkxRDdCQUFBMDY4",
      "snippet": {
        "publishedAt": "2019-07-19T10:12:02Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Journey Into Awakening",
        "description": "\"Real spiritual awakening is when something emerges from within you that is deeper than who you thought you were.\" Let's journey into awakening and see how we fit into the greater universe. Would you like to learn more wisdom from Eckhart Tolle? Make sure to subscribe for the latest teachings: http://bit.ly/EckhartYT\n\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/YaNXuSZI7eY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/YaNXuSZI7eY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/YaNXuSZI7eY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/YaNXuSZI7eY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/YaNXuSZI7eY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 41,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "YaNXuSZI7eY"
        }
      },
      "contentDetails": {
        "videoId": "YaNXuSZI7eY",
        "videoPublishedAt": "2019-07-19T15:00:05Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "pH7iO7QLnf8a9va6yrqD4h4IShQ",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi5DNkMwRUI2MkI4QkI4NDFG",
      "snippet": {
        "publishedAt": "2019-07-24T03:14:02Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "The Dream of Life and Success",
        "description": "The discovery of the transcendent dimension is the most important thing in any human life. In this video Eckhart discusses the awakening of consciousness as our common human destiny and the true measure of success in one’s lifetime. Make sure to subscribe for the latest teachings: http://bit.ly/EckhartYT\n\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/WFnr6vrMZJE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/WFnr6vrMZJE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/WFnr6vrMZJE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/WFnr6vrMZJE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/WFnr6vrMZJE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 42,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "WFnr6vrMZJE"
        }
      },
      "contentDetails": {
        "videoId": "WFnr6vrMZJE",
        "videoPublishedAt": "2019-07-24T13:00:06Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "XqN2O8fSp1JuTAju4z1cuTKGQ2o",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi5DRUQwODMxQzUyRTlGRkY3",
      "snippet": {
        "publishedAt": "2019-08-28T02:33:30Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Our Essential Nature and Awakening",
        "description": "Eckhart discusses the realization and the expression of our essential nature, beautifully describing how our lives lead us to and change us through awakening. Subscribe for official Eckhart Tolle content: http://bit.ly/EckhartYT\n\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/4ETelbX32eQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/4ETelbX32eQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/4ETelbX32eQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/4ETelbX32eQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/4ETelbX32eQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 43,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "4ETelbX32eQ"
        }
      },
      "contentDetails": {
        "videoId": "4ETelbX32eQ",
        "videoPublishedAt": "2019-08-29T14:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "z6-zFNYFUi8sQgFjWhcNhzqlFS0",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi41MzY4MzcwOUFFRUU3QzEx",
      "snippet": {
        "publishedAt": "2019-09-27T22:39:03Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "The Balance Between Doing and Being",
        "description": "Eckhart shares an essential teaching that likens the growth of awareness through difficulty to the body’s development of muscle through exercise. When we are pushed outside of our comfort zone, we have the chance to grow our perception and awaken. Subscribe to find greater awareness in life: http://bit.ly/EckhartYT\n\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/CIPLVr2eEQc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/CIPLVr2eEQc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/CIPLVr2eEQc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/CIPLVr2eEQc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/CIPLVr2eEQc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 44,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "CIPLVr2eEQc"
        }
      },
      "contentDetails": {
        "videoId": "CIPLVr2eEQc",
        "videoPublishedAt": "2019-09-28T16:00:03Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3TpZHSoLDsNn5NOmlcXEzoX2Omw",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi4yQjZFRkExQjFGODk3RUFD",
      "snippet": {
        "publishedAt": "2019-10-25T03:24:12Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "The Power of Inner Stillness",
        "description": "Eckhart shares the power of contemplating the ordinary moments of everyday life. By bringing consciousness to the small moments that often seem insignificant, we bring awareness, appreciation, and enjoyment to all forms of the present moment. Subscribe to find more stillness in life: http://bit.ly/EckhartYT\n\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/xoW_cPx_638/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/xoW_cPx_638/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/xoW_cPx_638/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/xoW_cPx_638/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/xoW_cPx_638/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 45,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "xoW_cPx_638"
        }
      },
      "contentDetails": {
        "videoId": "xoW_cPx_638",
        "videoPublishedAt": "2019-10-25T12:00:18Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "gOHGDOH8C_3IibM-lhikAwEVcK8",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi4yQUJFNUVCMzVDNjcxRTlF",
      "snippet": {
        "publishedAt": "2019-11-28T23:51:13Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Is Presence Possible Without Questioning Thoughts?",
        "description": "Eckhart answers the question \"Is it possible to be in the state of presence without before having questions or stressful thoughts?\" Intrusive or excessive thoughts are not the total of your consciousness. Being aware and questioning your thoughts is one of the first steps towards awakening. Subscribe to find greater fulfillment in life: http://bit.ly/EckhartYT\n\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\n\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\n\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\n\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/a841h1Nj-9I/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/a841h1Nj-9I/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/a841h1Nj-9I/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/a841h1Nj-9I/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/a841h1Nj-9I/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 46,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "a841h1Nj-9I"
        }
      },
      "contentDetails": {
        "videoId": "a841h1Nj-9I",
        "videoPublishedAt": "2019-11-29T22:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "nRJCTwbERijQdwHbYGbIPD9fk3M",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi40QzRDOEU0QUYwNUIxN0M1",
      "snippet": {
        "publishedAt": "2020-01-14T07:05:44Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Life After Awareness | Do You Let The Universe Take Control?",
        "description": "Once you become aware, do you have to have a plan of where you are going or do you leave that up to the universe? Eckhart discusses life after awareness and how the creative impulse of the universe works through us to manifest the world we see. Subscribe to find greater fulfillment in life: http://bit.ly/EckhartYT\r\n\r\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\r\n\r\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\r\n\r\nCheck out some of our other playlist:\r\nMeditation - https://bit.ly/2QkG5uU\r\nOur True Identity - https://bit.ly/2COKGTo\r\nSupporting Awakening - https://bit.ly/2O4M6dW\r\nDaily Life - https://bit.ly/2O70SRp\r\nConversations with Guests - https://bit.ly/2MiB2Ig\r\n\r\nConnect with us elsewhere:\r\nhttp://www.EckhartTolleNow.com\r\nhttps://www.facebook.com/Eckharttolle\r\nhttp://www.instagram.com/eckharttolle\r\nhttps://twitter.com/EckhartTolle\r\nhttp://pinterest.com/eckharttolle\r\n\r\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\r\n\r\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\r\n\r\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\r\n\r\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/TjioVaqoyU0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/TjioVaqoyU0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/TjioVaqoyU0/hqdefault.jpg",
            "width": 480,
            "height": 360
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 47,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "TjioVaqoyU0"
        }
      },
      "contentDetails": {
        "videoId": "TjioVaqoyU0",
        "videoPublishedAt": "2020-01-14T17:00:06Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "lo3toQgwV_7IOPNlanaY2wtrJSA",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi5ENjI1QUI0MDI5NEQzODFE",
      "snippet": {
        "publishedAt": "2020-02-27T04:51:53Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Dealing with Subconscious Sabotage",
        "description": "An audience member asks \"My subconscious need for superiority sabotages me pretty often. What can I do about it?\" Awareness is a sign of growth, explains Eckhart Tolle, but the mind can be cunning in its response to higher consciousness. Subscribe to find greater fulfillment in life: \r\nhttp://bit.ly/EckhartYT\r\n\r\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\r\n\r\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\r\n\r\nCheck out some of our other playlist:\r\nMeditation - https://bit.ly/2QkG5uU\r\nOur True Identity - https://bit.ly/2COKGTo\r\nSupporting Awakening - https://bit.ly/2O4M6dW\r\nDaily Life - https://bit.ly/2O70SRp\r\nConversations with Guests - https://bit.ly/2MiB2Ig\r\n\r\nConnect with us elsewhere:\r\nhttp://www.EckhartTolleNow.com\r\nhttps://www.facebook.com/Eckharttolle\r\nhttp://www.instagram.com/eckharttolle\r\nhttps://twitter.com/EckhartTolle\r\nhttp://pinterest.com/eckharttolle\r\n\r\nEckhart Tolle is widely recognized as one of the most original and inspiring spiritual teachers of our time. He travels and teaches throughout the world.\r\n\r\nEckhart is not aligned with any particular religion or tradition, but excludes none. His profound yet simple and practical teachings have helped thousands of people find inner peace, healing and greater fulfillment in their lives. At the core of his teachings lies the transformation of individual and collective human consciousness - a global spiritual awakening.\r\n\r\nEckhart Tolle is the author of The Power of Now, a #1 New York Times Bestseller, which has been translated into 32 languages and become one of the most influential spiritual books of our time.\r\n\r\nIn his most recent book, A New Earth, he shows how transcending our ego-based state of consciousness is not only essential to personal happiness, but also the key to ending conflict and suffering throughout the world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/mXDaxBfAaxA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/mXDaxBfAaxA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/mXDaxBfAaxA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/mXDaxBfAaxA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/mXDaxBfAaxA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 48,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "mXDaxBfAaxA"
        }
      },
      "contentDetails": {
        "videoId": "mXDaxBfAaxA",
        "videoPublishedAt": "2020-02-27T13:00:19Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "a7riICMad4OKs2cVqPKrc5Otwm8",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi44QzVGQUU2QjE2NDgxM0M4",
      "snippet": {
        "publishedAt": "2020-03-24T01:04:31Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Staying Conscious in the Face of Adversity | A Special Message From Eckhart Tolle",
        "description": "Eckhart, Kim, and our entire team at Eckhart Teachings want you to know that we are committed to supporting you through this challenging time. We have been moving swiftly to help Eckhart bring you a brand-new teachings series to specifically address the global situation we are facing together. This new multi-part series, Staying Conscious in the Face of Adversity, will be coming soon to you absolutely free. Subscribe to find greater fulfillment in life: http://bit.ly/EckhartYT\r\n\nFind our current library of free teachings here: https://bit.ly/ETfreeteachings\nWe want to help you take care of your inner state of consciousness, which as you know Eckhart says, is of absolute importance. We have created a special page you can access at any time with free guided meditations and teachings with Eckhart and Kim. \n\r\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\r\n\r\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\r\n\r\nCheck out some of our other playlist:\r\nMeditation - https://bit.ly/2QkG5uU\r\nOur True Identity - https://bit.ly/2COKGTo\r\nSupporting Awakening - https://bit.ly/2O4M6dW\r\nDaily Life - https://bit.ly/2O70SRp\r\nConversations with Guests - https://bit.ly/2MiB2Ig\r\n\r\nConnect with us elsewhere:\r\nhttp://www.EckhartTolleNow.com\r\nhttps://www.facebook.com/Eckharttolle\r\nhttp://www.instagram.com/eckharttolle\r\nhttps://twitter.com/EckhartTolle\r\nhttp://pinterest.com/eckharttolle\n\r\nEckhart Tolle is a spiritual teacher and author, born in Germany and educated at the Universities of London and Cambridge. At the age of 29 a profound inner transformation radically changed the course of his life. He devoted the next several years to understanding, integrating, and deepening that transformation. With his international bestsellers, The Power of Now and A New Earth—translated into over 52 languages—he has introduced millions to the joy and freedom of living life in the present moment. The New York Times has described him as “the most popular spiritual author in the United States”, and Watkins Review has named him “the most spiritually influential person in the world.”\n\nEckhart’s profound, yet simple teachings have helped countless people around the globe experience a state of vibrantly alive inner peace in their daily lives. His teachings focus on awakening consciousness, which transcends ego and discursive thinking, and can be seen as the next step in human evolution. In the awakened state of presence, we discover what Eckhart describes as our essential identity—who we are beneath the surface—and its power for transforming our selves and our world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/wKpmXhGVMxI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/wKpmXhGVMxI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/wKpmXhGVMxI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/wKpmXhGVMxI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/wKpmXhGVMxI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 49,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "wKpmXhGVMxI"
        }
      },
      "contentDetails": {
        "videoId": "wKpmXhGVMxI",
        "videoPublishedAt": "2020-03-21T21:08:03Z"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 65,
    "resultsPerPage": 50
  }
}

  recorded_at: Tue, 07 Jul 2020 03:11:57 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=AIzaSyCXYWdWx2vQtWi9CqsJe0WT6ryiKgT6BWM&maxResults=50&pageToken=CDIQAA&part=snippet,contentDetails&playlistId=PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Tue, 07 Jul 2020 03:11:57 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-29=":443"; ma=2592000,h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443";
        ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "kind": "youtube#playlistItemListResponse",
  "etag": "pCcyIboH9-BTwujpO0yj1IIMPJs",
  "prevPageToken": "CDIQAQ",
  "items": [
    {
      "kind": "youtube#playlistItem",
      "etag": "Rp3RZVq19bvEP9VSIl1Zld4F7bY",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi4xMzgwMzBERjQ4NjEzNUE5",
      "snippet": {
        "publishedAt": "2020-04-01T02:25:26Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "The Grip of Ego & Living More Consciously",
        "description": "In this talk, Eckhart speaks on a subject that nearly everyone can understand: our most cherished views of ourselves. He explains the origins of the incessant monologue that runs in our heads, pointing out that our ego feeds on that same stream of self-talk. Subscribe to find your awakening in life: http://bit.ly/EckhartYT\n\nWe want to help you take care of your inner state of consciousness, which as you know Eckhart says, is of absolute importance. We have created a special page you can access at any time with free guided meditations and teachings with Eckhart and Kim. Find our current library of free teachings here: https://bit.ly/ETfreeteachings\r\n\r\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\r\n\r\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\r\n\r\nCheck out some of our other playlist:\r\nMeditation - https://bit.ly/2QkG5uU\r\nOur True Identity - https://bit.ly/2COKGTo\r\nSupporting Awakening - https://bit.ly/2O4M6dW\r\nDaily Life - https://bit.ly/2O70SRp\r\nConversations with Guests - https://bit.ly/2MiB2Ig\r\n\r\nConnect with us elsewhere:\r\nhttp://www.EckhartTolleNow.com\r\nhttps://www.facebook.com/Eckharttolle\r\nhttp://www.instagram.com/eckharttolle\r\nhttps://twitter.com/EckhartTolle\r\nhttp://pinterest.com/eckharttolle\n\r\nEckhart Tolle is a spiritual teacher and author, born in Germany and educated at the Universities of London and Cambridge. At the age of 29 a profound inner transformation radically changed the course of his life. He devoted the next several years to understanding, integrating, and deepening that transformation. With his international bestsellers, The Power of Now and A New Earth—translated into over 52 languages—he has introduced millions to the joy and freedom of living life in the present moment. The New York Times has described him as “the most popular spiritual author in the United States”, and Watkins Review has named him “the most spiritually influential person in the world.”\n\nEckhart’s profound, yet simple teachings have helped countless people around the globe experience a state of vibrantly alive inner peace in their daily lives. His teachings focus on awakening consciousness, which transcends ego and discursive thinking, and can be seen as the next step in human evolution. In the awakened state of presence, we discover what Eckhart describes as our essential identity—who we are beneath the surface—and its power for transforming our selves and our world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/cTvjmMn0sa0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/cTvjmMn0sa0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/cTvjmMn0sa0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/cTvjmMn0sa0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/cTvjmMn0sa0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 50,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "cTvjmMn0sa0"
        }
      },
      "contentDetails": {
        "videoId": "cTvjmMn0sa0",
        "videoPublishedAt": "2020-04-01T15:00:18Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "wVQWKuAsQv75H44hz0ROJLE6Veg",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi4zMEQ1MEIyRTFGNzhDQzFB",
      "snippet": {
        "publishedAt": "2020-04-03T21:41:46Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "There Is Another Way | Special Teaching from Eckhart Tolle",
        "description": "Eckhart shares an important practice for this challenging time that allows us to rise above our thoughts about external circumstances and access a deeper dimension of ourselves. Subscribe to find greater dimension in life: http://bit.ly/EckhartYT\r\n\nWe want to help you take care of your inner state of consciousness, which as you know Eckhart says, is of absolute importance. We have created a special page you can access at any time with free guided meditations and teachings with Eckhart and Kim. Find our current library of free teachings here: https://bit.ly/ETfreeteachings\n\r\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\r\n\r\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\r\n\r\nCheck out some of our other playlist:\r\nMeditation - https://bit.ly/2QkG5uU\r\nOur True Identity - https://bit.ly/2COKGTo\r\nSupporting Awakening - https://bit.ly/2O4M6dW\r\nDaily Life - https://bit.ly/2O70SRp\r\nConversations with Guests - https://bit.ly/2MiB2Ig\r\n\r\nConnect with us elsewhere:\r\nhttp://www.EckhartTolleNow.com\r\nhttps://www.facebook.com/Eckharttolle\r\nhttp://www.instagram.com/eckharttolle\r\nhttps://twitter.com/EckhartTolle\r\nhttp://pinterest.com/eckharttolle\n\r\nEckhart Tolle is a spiritual teacher and author, born in Germany and educated at the Universities of London and Cambridge. At the age of 29 a profound inner transformation radically changed the course of his life. He devoted the next several years to understanding, integrating, and deepening that transformation. With his international bestsellers, The Power of Now and A New Earth—translated into over 52 languages—he has introduced millions to the joy and freedom of living life in the present moment. The New York Times has described him as “the most popular spiritual author in the United States”, and Watkins Review has named him “the most spiritually influential person in the world.”\n\nEckhart’s profound, yet simple teachings have helped countless people around the globe experience a state of vibrantly alive inner peace in their daily lives. His teachings focus on awakening consciousness, which transcends ego and discursive thinking, and can be seen as the next step in human evolution. In the awakened state of presence, we discover what Eckhart describes as our essential identity—who we are beneath the surface—and its power for transforming our selves and our world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/5MG1XcntrT4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/5MG1XcntrT4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/5MG1XcntrT4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/5MG1XcntrT4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/5MG1XcntrT4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 51,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "5MG1XcntrT4"
        }
      },
      "contentDetails": {
        "videoId": "5MG1XcntrT4",
        "videoPublishedAt": "2020-04-03T22:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "-MAYyfFqlSoYPbthF_okn4Af7KU",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi42Qzk5MkEzQjVFQjYwRDA4",
      "snippet": {
        "publishedAt": "2020-04-08T00:08:44Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Making Eckhart Tolle's Teachings More Accessible",
        "description": "Eckhart mentions the efforts of the Eckhart Tolle Foundation in bringing his material to more people in need, reminding us that individuals tend to find spiritual teachings and teachers when they are most ready for them. Subscribe to find greater awareness in life: http://bit.ly/EckhartYT\n\nWe want to help you take care of your inner state of consciousness, which as you know Eckhart says, is of absolute importance. We have created a special page you can access at any time with free guided meditations and teachings with Eckhart and Kim. Find our current library of free teachings here: https://bit.ly/ETfreeteachings\n\r\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\r\n\r\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\r\n\r\nCheck out some of our other playlist:\r\nMeditation - https://bit.ly/2QkG5uU\r\nOur True Identity - https://bit.ly/2COKGTo\r\nSupporting Awakening - https://bit.ly/2O4M6dW\r\nDaily Life - https://bit.ly/2O70SRp\r\nConversations with Guests - https://bit.ly/2MiB2Ig\r\n\r\nConnect with us elsewhere:\r\nhttp://www.EckhartTolleNow.com\r\nhttps://www.facebook.com/Eckharttolle\r\nhttp://www.instagram.com/eckharttolle\r\nhttps://twitter.com/EckhartTolle\r\nhttp://pinterest.com/eckharttolle\n\r\nEckhart Tolle is a spiritual teacher and author, born in Germany and educated at the Universities of London and Cambridge. At the age of 29 a profound inner transformation radically changed the course of his life. He devoted the next several years to understanding, integrating, and deepening that transformation. With his international bestsellers, The Power of Now and A New Earth—translated into over 52 languages—he has introduced millions to the joy and freedom of living life in the present moment. The New York Times has described him as “the most popular spiritual author in the United States”, and Watkins Review has named him “the most spiritually influential person in the world.”\n\nEckhart’s profound, yet simple teachings have helped countless people around the globe experience a state of vibrantly alive inner peace in their daily lives. His teachings focus on awakening consciousness, which transcends ego and discursive thinking, and can be seen as the next step in human evolution. In the awakened state of presence, we discover what Eckhart describes as our essential identity—who we are beneath the surface—and its power for transforming our selves and our world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/nmjhFvSEYt4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/nmjhFvSEYt4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/nmjhFvSEYt4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/nmjhFvSEYt4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/nmjhFvSEYt4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 52,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "nmjhFvSEYt4"
        }
      },
      "contentDetails": {
        "videoId": "nmjhFvSEYt4",
        "videoPublishedAt": "2020-04-08T00:15:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "I-cskB6HWPMjIjHiM9IrzoR2wpg",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi41NTZEOThBNThFOUVGQkVB",
      "snippet": {
        "publishedAt": "2020-04-15T20:30:53Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Understanding That Life Has Its Challenges",
        "description": "Eckhart talks about how life’s inevitable difficulties become a pathway to awakening, and how to stay present amidst the continual challenges we encounter. Subscribe to find greater presence in life: http://bit.ly/EckhartYT\n\r\nWe want to help you take care of your inner state of consciousness, which as you know Eckhart says, is of absolute importance. We have created a special page you can access at any time with free guided meditations and teachings with Eckhart and Kim. Find our current library of free teachings here: https://bit.ly/ETfreeteachings\n\r\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\r\n\r\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\r\n\r\nCheck out some of our other playlist:\r\nMeditation - https://bit.ly/2QkG5uU\r\nOur True Identity - https://bit.ly/2COKGTo\r\nSupporting Awakening - https://bit.ly/2O4M6dW\r\nDaily Life - https://bit.ly/2O70SRp\r\nConversations with Guests - https://bit.ly/2MiB2Ig\r\n\r\nConnect with us elsewhere:\r\nhttp://www.EckhartTolleNow.com\r\nhttps://www.facebook.com/Eckharttolle\r\nhttp://www.instagram.com/eckharttolle\r\nhttps://twitter.com/EckhartTolle\r\nhttp://pinterest.com/eckharttolle\n\r\nEckhart Tolle is a spiritual teacher and author, born in Germany and educated at the Universities of London and Cambridge. At the age of 29 a profound inner transformation radically changed the course of his life. He devoted the next several years to understanding, integrating, and deepening that transformation. With his international bestsellers, The Power of Now and A New Earth—translated into over 52 languages—he has introduced millions to the joy and freedom of living life in the present moment. The New York Times has described him as “the most popular spiritual author in the United States”, and Watkins Review has named him “the most spiritually influential person in the world.”\n\nEckhart’s profound, yet simple teachings have helped countless people around the globe experience a state of vibrantly alive inner peace in their daily lives. His teachings focus on awakening consciousness, which transcends ego and discursive thinking, and can be seen as the next step in human evolution. In the awakened state of presence, we discover what Eckhart describes as our essential identity—who we are beneath the surface—and its power for transforming our selves and our world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/rUQ1AdP6cII/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/rUQ1AdP6cII/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/rUQ1AdP6cII/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/rUQ1AdP6cII/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/rUQ1AdP6cII/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 53,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "rUQ1AdP6cII"
        }
      },
      "contentDetails": {
        "videoId": "rUQ1AdP6cII",
        "videoPublishedAt": "2020-04-15T21:00:30Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "zFNvYP4m3ivEgCUnVbMnFw39_Hc",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi43NERCMDIzQzFBMERCMEE3",
      "snippet": {
        "publishedAt": "2020-04-21T19:58:31Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "What Do You Recommend for Healing Trauma?",
        "description": "Sometimes it may be difficult to see past trauma, to be completely in the moment without excessive thinking or managing past trauma. Eckhart offers a compassionate look at suffering through the lens of awakening. Subscribe to find greater presence in life: http://bit.ly/EckhartYT\r\n\r\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\r\n\r\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\r\n\r\nCheck out some of our other playlist:\r\nMeditation - https://bit.ly/2QkG5uU\r\nOur True Identity - https://bit.ly/2COKGTo\r\nSupporting Awakening - https://bit.ly/2O4M6dW\r\nDaily Life - https://bit.ly/2O70SRp\r\nConversations with Guests - https://bit.ly/2MiB2Ig\r\n\r\nConnect with us elsewhere:\r\nhttp://www.EckhartTolleNow.com\r\nhttps://www.facebook.com/Eckharttolle\r\nhttp://www.instagram.com/eckharttolle\r\nhttps://twitter.com/EckhartTolle\r\nhttp://pinterest.com/eckharttolle\n\r\nEckhart Tolle is a spiritual teacher and author, born in Germany and educated at the Universities of London and Cambridge. At the age of 29 a profound inner transformation radically changed the course of his life. He devoted the next several years to understanding, integrating, and deepening that transformation. With his international bestsellers, The Power of Now and A New Earth—translated into over 52 languages—he has introduced millions to the joy and freedom of living life in the present moment. The New York Times has described him as “the most popular spiritual author in the United States”, and Watkins Review has named him “the most spiritually influential person in the world.”\n\nEckhart’s profound, yet simple teachings have helped countless people around the globe experience a state of vibrantly alive inner peace in their daily lives. His teachings focus on awakening consciousness, which transcends ego and discursive thinking, and can be seen as the next step in human evolution. In the awakened state of presence, we discover what Eckhart describes as our essential identity—who we are beneath the surface—and its power for transforming our selves and our world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/dZ2GfrendQg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/dZ2GfrendQg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/dZ2GfrendQg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/dZ2GfrendQg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/dZ2GfrendQg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 54,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "dZ2GfrendQg"
        }
      },
      "contentDetails": {
        "videoId": "dZ2GfrendQg",
        "videoPublishedAt": "2020-04-21T20:30:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "PX0fpolJmZb8jVgGFHP7X-IQ9Mc",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi5GNjAwN0Y0QTFGOTVDMEMy",
      "snippet": {
        "publishedAt": "2020-04-23T00:04:50Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Awakening Through Adversity | Special Teaching from Eckhart Tolle",
        "description": "\"Encountering adversity ultimately deepens us and gives us access to inner strength,\" explains Eckhart. May the teachings in this new series serve to deepen your awakening and orient you toward what Eckhart calls \"the transcendent dimension,\" where we can find an abiding sense of peace and rootedness even in the midst of turmoil. \"Staying Conscious In The Face of Adversity\" is a free teaching series on how crisis propels awakening with Eckhart Tolle. Sign up for free here: https://bit.ly/freecoursesignup\r\n\nSubscribe to find greater fulfillment in life: http://bit.ly/EckhartYT\n\r\nIn our first video, \"Awakening Through Adversity,\" Eckhart discusses: \n-How the ego perceives challenges and obstacles\n-The three kinds of adversity—personal, collective, and mind-made \n-Step one in finding freedom from unnecessary suffering: becoming aware of your mind\n-How the collective mind finds expression in social and mainstream media\n-The realization that changes everything: you are not your thoughts\n-The vital relationship between spiritual awakening, human development, and adversity\n-Finding peace amid turmoil\n\r\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\r\n\r\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\r\n\r\nCheck out some of our other playlist:\r\nMeditation - https://bit.ly/2QkG5uU\r\nOur True Identity - https://bit.ly/2COKGTo\r\nSupporting Awakening - https://bit.ly/2O4M6dW\r\nDaily Life - https://bit.ly/2O70SRp\r\nConversations with Guests - https://bit.ly/2MiB2Ig\r\n\r\nConnect with us elsewhere:\r\nhttp://www.EckhartTolleNow.com\r\nhttps://www.facebook.com/Eckharttolle\r\nhttp://www.instagram.com/eckharttolle\r\nhttps://twitter.com/EckhartTolle\r\nhttp://pinterest.com/eckharttolle\n\r\nEckhart Tolle is a spiritual teacher and author, born in Germany and educated at the Universities of London and Cambridge. At the age of 29 a profound inner transformation radically changed the course of his life. He devoted the next several years to understanding, integrating, and deepening that transformation. With his international bestsellers, The Power of Now and A New Earth—translated into over 52 languages—he has introduced millions to the joy and freedom of living life in the present moment. The New York Times has described him as “the most popular spiritual author in the United States”, and Watkins Review has named him “the most spiritually influential person in the world.”\n\nEckhart’s profound, yet simple teachings have helped countless people around the globe experience a state of vibrantly alive inner peace in their daily lives. His teachings focus on awakening consciousness, which transcends ego and discursive thinking, and can be seen as the next step in human evolution. In the awakened state of presence, we discover what Eckhart describes as our essential identity—who we are beneath the surface—and its power for transforming our selves and our world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/bUzC9CrTpoo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/bUzC9CrTpoo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/bUzC9CrTpoo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/bUzC9CrTpoo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/bUzC9CrTpoo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 55,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "bUzC9CrTpoo"
        }
      },
      "contentDetails": {
        "videoId": "bUzC9CrTpoo",
        "videoPublishedAt": "2020-04-23T19:00:15Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "n9GCQu6CmIRN00bcaTO-K08qOgU",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi4wNEU1MTI4NkZEMzVBN0JF",
      "snippet": {
        "publishedAt": "2020-05-08T22:09:33Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Awakening Through Loss & The Nature of Impermanence",
        "description": "Eckhart discusses how the cultivation of present-moment awareness and the acceptance of the nature of impermanence can inform and guide our evolution. Subscribe to find greater presence in life: http://bit.ly/EckhartYT\n\n\"Staying Conscious In The Face of Adversity\" A free teaching series on how crisis propels awakening with Eckhart Tolle. Sign up for free here: https://bit.ly/freecoursesignup\n\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is a spiritual teacher and author, born in Germany and educated at the Universities of London and Cambridge. At the age of 29 a profound inner transformation radically changed the course of his life. He devoted the next several years to understanding, integrating, and deepening that transformation. With his international bestsellers, The Power of Now and A New Earth—translated into over 52 languages—he has introduced millions to the joy and freedom of living life in the present moment. The New York Times has described him as “the most popular spiritual author in the United States”, and Watkins Review has named him “the most spiritually influential person in the world.”\n\nEckhart’s profound, yet simple teachings have helped countless people around the globe experience a state of vibrantly alive inner peace in their daily lives. His teachings focus on awakening consciousness, which transcends ego and discursive thinking, and can be seen as the next step in human evolution. In the awakened state of presence, we discover what Eckhart describes as our essential identity—who we are beneath the surface—and its power for transforming our selves and our world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/UWNKNTG-EDA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/UWNKNTG-EDA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/UWNKNTG-EDA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/UWNKNTG-EDA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/UWNKNTG-EDA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 56,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "UWNKNTG-EDA"
        }
      },
      "contentDetails": {
        "videoId": "UWNKNTG-EDA",
        "videoPublishedAt": "2020-05-08T23:00:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "KP72W0lLL16WXFz-KdBUl3AVqc8",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi4wMTYxQzVBRDI1NEVDQUZE",
      "snippet": {
        "publishedAt": "2020-05-21T01:14:17Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "The Futility of Egoic Reaction & Navigating Our Awakening",
        "description": "Sometimes it may be difficult to navigate the path of awakening, aligning both an inner and outer world. In this issue from Evolving Toward Freedom, Eckhart artfully describes the arising of presence on both the personal and societal levels: the futility of Egoic Reaction, and how we can practically navigate the process ourselves. Subscribe to find greater fulfillment in life: \nhttp://bit.ly/EckhartYT\n\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is a spiritual teacher and author, born in Germany and educated at the Universities of London and Cambridge. At the age of 29 a profound inner transformation radically changed the course of his life. He devoted the next several years to understanding, integrating, and deepening that transformation. With his international bestsellers, The Power of Now and A New Earth—translated into over 52 languages—he has introduced millions to the joy and freedom of living life in the present moment. The New York Times has described him as “the most popular spiritual author in the United States”, and Watkins Review has named him “the most spiritually influential person in the world.”\n\nEckhart’s profound, yet simple teachings have helped countless people around the globe experience a state of vibrantly alive inner peace in their daily lives. His teachings focus on awakening consciousness, which transcends ego and discursive thinking, and can be seen as the next step in human evolution. In the awakened state of presence, we discover what Eckhart describes as our essential identity—who we are beneath the surface—and its power for transforming our selves and our world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/_9DCVEwd6Lw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/_9DCVEwd6Lw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/_9DCVEwd6Lw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/_9DCVEwd6Lw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/_9DCVEwd6Lw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 57,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "_9DCVEwd6Lw"
        }
      },
      "contentDetails": {
        "videoId": "_9DCVEwd6Lw",
        "videoPublishedAt": "2020-05-21T02:00:05Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "0hc6HV9YsHfaRRNrtdl1I47fpt0",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi4zMUEyMkQwOTk0NTg4MDgw",
      "snippet": {
        "publishedAt": "2020-05-23T22:33:47Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Opinions Are Abstractions in Our Minds | Awaken From Self-Talk",
        "description": "Can you listen from a place of alert stillness and allow people to express their opinions? Eckhart discusses the shift in consciousness from our ordinary perspective to a deeper awareness that transcends the personal sense of identity. Subscribe to find greater fulfillment in life: \nhttp://bit.ly/EckhartYT\n\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is a spiritual teacher and author, born in Germany and educated at the Universities of London and Cambridge. At the age of 29 a profound inner transformation radically changed the course of his life. He devoted the next several years to understanding, integrating, and deepening that transformation. With his international bestsellers, The Power of Now and A New Earth—translated into over 52 languages—he has introduced millions to the joy and freedom of living life in the present moment. The New York Times has described him as “the most popular spiritual author in the United States”, and Watkins Review has named him “the most spiritually influential person in the world.”\n\nEckhart’s profound, yet simple teachings have helped countless people around the globe experience a state of vibrantly alive inner peace in their daily lives. His teachings focus on awakening consciousness, which transcends ego and discursive thinking, and can be seen as the next step in human evolution. In the awakened state of presence, we discover what Eckhart describes as our essential identity—who we are beneath the surface—and its power for transforming our selves and our world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/uzA2YyRs8XA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/uzA2YyRs8XA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/uzA2YyRs8XA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/uzA2YyRs8XA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/uzA2YyRs8XA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 58,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "uzA2YyRs8XA"
        }
      },
      "contentDetails": {
        "videoId": "uzA2YyRs8XA",
        "videoPublishedAt": "2020-05-23T23:00:15Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "q2u00YAuKd_uZab4EGpxhfOLUMw",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi42QzdBMzlBQzQzRjQ0QkQy",
      "snippet": {
        "publishedAt": "2020-06-06T18:37:45Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Presence Beyond Form",
        "description": "Challenge and suffering are a part of every human life. Yet, teaches Eckhart, so is the potential for discovering through even the greatest adversity who we are in our depths. Subscribe to find greater presence in life: http://bit.ly/EckhartYT\n\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is a spiritual teacher and author, born in Germany and educated at the Universities of London and Cambridge. At the age of 29 a profound inner transformation radically changed the course of his life. He devoted the next several years to understanding, integrating, and deepening that transformation. With his international bestsellers, The Power of Now and A New Earth—translated into over 52 languages—he has introduced millions to the joy and freedom of living life in the present moment. The New York Times has described him as “the most popular spiritual author in the United States”, and Watkins Review has named him “the most spiritually influential person in the world.”\n\nEckhart’s profound, yet simple teachings have helped countless people around the globe experience a state of vibrantly alive inner peace in their daily lives. His teachings focus on awakening consciousness, which transcends ego and discursive thinking, and can be seen as the next step in human evolution. In the awakened state of presence, we discover what Eckhart describes as our essential identity—who we are beneath the surface—and its power for transforming our selves and our world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/VwfTve6M0kk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/VwfTve6M0kk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/VwfTve6M0kk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/VwfTve6M0kk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/VwfTve6M0kk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 59,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "VwfTve6M0kk"
        }
      },
      "contentDetails": {
        "videoId": "VwfTve6M0kk",
        "videoPublishedAt": "2020-06-06T19:00:06Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ywsthhCPv7TftMe_Qh6fGjewakI",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi41OURENDc2NEM1MDI5Mjky",
      "snippet": {
        "publishedAt": "2020-06-10T22:55:36Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Being At Peace | The Present Moment",
        "description": "Rather than focusing on arriving in the future, we experience the most fullness in life from the present moment. When we are rooted in this state, we can manifest anything. Subscribe to find greater presence in life: http://bit.ly/EckhartYT\n\nConscious Manifestation 2020\nAn 8-week online course to fulfill your highest purpose & create from the fullness of being: \nStarting on June 25, 2020. Enrollment open for a limited time: https://bit.ly/3d9sqlD\n\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is a spiritual teacher and author, born in Germany and educated at the Universities of London and Cambridge. At the age of 29 a profound inner transformation radically changed the course of his life. He devoted the next several years to understanding, integrating, and deepening that transformation. With his international bestsellers, The Power of Now and A New Earth—translated into over 52 languages—he has introduced millions to the joy and freedom of living life in the present moment. The New York Times has described him as “the most popular spiritual author in the United States”, and Watkins Review has named him “the most spiritually influential person in the world.”\n\nEckhart’s profound, yet simple teachings have helped countless people around the globe experience a state of vibrantly alive inner peace in their daily lives. His teachings focus on awakening consciousness, which transcends ego and discursive thinking, and can be seen as the next step in human evolution. In the awakened state of presence, we discover what Eckhart describes as our essential identity—who we are beneath the surface—and its power for transforming our selves and our world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/L-HWfAZlAbI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/L-HWfAZlAbI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/L-HWfAZlAbI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/L-HWfAZlAbI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/L-HWfAZlAbI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 60,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "L-HWfAZlAbI"
        }
      },
      "contentDetails": {
        "videoId": "L-HWfAZlAbI",
        "videoPublishedAt": "2020-06-10T23:00:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "6WM9Nt9GXyS6TMfywFYCJ8d1m4E",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi4wRjhFM0MxMTU1MEUzQ0VB",
      "snippet": {
        "publishedAt": "2020-06-12T20:36:09Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Discovering Freedom Through Challenge",
        "description": "Eckhart discusses a range of topics including different forms of knowledge, the fourth state of consciousness, the source of unhappiness, and the purpose of life’s challenges. Subscribe to find greater fulfillment in life: \nhttp://bit.ly/EckhartYT\n\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is a spiritual teacher and author, born in Germany and educated at the Universities of London and Cambridge. At the age of 29 a profound inner transformation radically changed the course of his life. He devoted the next several years to understanding, integrating, and deepening that transformation. With his international bestsellers, The Power of Now and A New Earth—translated into over 52 languages—he has introduced millions to the joy and freedom of living life in the present moment. The New York Times has described him as “the most popular spiritual author in the United States”, and Watkins Review has named him “the most spiritually influential person in the world.”\n\nEckhart’s profound, yet simple teachings have helped countless people around the globe experience a state of vibrantly alive inner peace in their daily lives. His teachings focus on awakening consciousness, which transcends ego and discursive thinking, and can be seen as the next step in human evolution. In the awakened state of presence, we discover what Eckhart describes as our essential identity—who we are beneath the surface—and its power for transforming our selves and our world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/zgXhEImYvb4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/zgXhEImYvb4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/zgXhEImYvb4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/zgXhEImYvb4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/zgXhEImYvb4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 61,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "zgXhEImYvb4"
        }
      },
      "contentDetails": {
        "videoId": "zgXhEImYvb4",
        "videoPublishedAt": "2020-06-12T21:30:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "IdK8eQOqFkyIoxrS1a6SQwvxhVM",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi5CNTZFOTNGQzZEODg1RUQx",
      "snippet": {
        "publishedAt": "2020-06-15T22:51:51Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Destined to Evolve Our Consciousness",
        "description": "Eckhart discusses the evolution of our collective consciousness and the individual's role in the awakening of awareness, explaining why true social change must be rooted in the realization of who we are beyond the level of form. Subscribe to find greater fulfillment in life: http://bit.ly/EckhartYT\n\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is a spiritual teacher and author, born in Germany and educated at the Universities of London and Cambridge. At the age of 29 a profound inner transformation radically changed the course of his life. He devoted the next several years to understanding, integrating, and deepening that transformation. With his international bestsellers, The Power of Now and A New Earth—translated into over 52 languages—he has introduced millions to the joy and freedom of living life in the present moment. The New York Times has described him as “the most popular spiritual author in the United States”, and Watkins Review has named him “the most spiritually influential person in the world.”\n\nEckhart’s profound, yet simple teachings have helped countless people around the globe experience a state of vibrantly alive inner peace in their daily lives. His teachings focus on awakening consciousness, which transcends ego and discursive thinking, and can be seen as the next step in human evolution. In the awakened state of presence, we discover what Eckhart describes as our essential identity—who we are beneath the surface—and its power for transforming our selves and our world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/a2gtEjtXCTo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/a2gtEjtXCTo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/a2gtEjtXCTo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/a2gtEjtXCTo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/a2gtEjtXCTo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 62,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "a2gtEjtXCTo"
        }
      },
      "contentDetails": {
        "videoId": "a2gtEjtXCTo",
        "videoPublishedAt": "2020-06-15T23:00:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "cSKvLphxP102T1N715VnkDw_xxE",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi5CNTcxMDQ0NThBNzMxODYz",
      "snippet": {
        "publishedAt": "2020-06-25T21:52:31Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Guided Meditation | Changing the World Through Presence",
        "description": "\"Don't let a mad world tell you that success is anything other than a successful present moment.\" In this presence meditation Eckhart teaches you silence, accessing stillness, your essence as consciousness; freedom from thought, and the intelligence & awakening of the universe. Subscribe to find greater presence in life: http://bit.ly/EckhartYT\n\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is a spiritual teacher and author, born in Germany and educated at the Universities of London and Cambridge. At the age of 29 a profound inner transformation radically changed the course of his life. He devoted the next several years to understanding, integrating, and deepening that transformation. With his international bestsellers, The Power of Now and A New Earth—translated into over 52 languages—he has introduced millions to the joy and freedom of living life in the present moment. The New York Times has described him as “the most popular spiritual author in the United States”, and Watkins Review has named him “the most spiritually influential person in the world.”\n\nEckhart’s profound, yet simple teachings have helped countless people around the globe experience a state of vibrantly alive inner peace in their daily lives. His teachings focus on awakening consciousness, which transcends ego and discursive thinking, and can be seen as the next step in human evolution. In the awakened state of presence, we discover what Eckhart describes as our essential identity—who we are beneath the surface—and its power for transforming our selves and our world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/i3fMUJhPX88/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/i3fMUJhPX88/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/i3fMUJhPX88/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/i3fMUJhPX88/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/i3fMUJhPX88/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 63,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "i3fMUJhPX88"
        }
      },
      "contentDetails": {
        "videoId": "i3fMUJhPX88",
        "videoPublishedAt": "2020-06-25T22:00:09Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "YnpdXeo3NKvtczWzW8J8uT8w1-4",
      "id": "UExFZ3VJRlN1cW02Z3EzajJoOHd2QlhKU1ZxLU1oRTVWRi5ERkUyQTM0MzEwQjZCMTY5",
      "snippet": {
        "publishedAt": "2020-07-02T17:58:36Z",
        "channelId": "UCj9fPezLH1HUh7mSo-tB1Mg",
        "title": "Transcending Limitations to Awaken",
        "description": "Realize that there is a freedom within, where limitations can be transcended. Through non-judgment of the present moment, non-reaction, and an openness to what is. Find your freedom within with this teaching from Eckhart Tolle. Subscribe to find greater fulfillment in life: http://bit.ly/EckhartYT\n\nWant to watch and hear more of Eckhart's Teachings? Become a member today and join our growing community! http://bit.ly/ETmembership\n\nInterested in diving deeper into Eckhart Tolle's work? Enjoy a FREE 10-DAY TRIAL to Eckhart Tolle Now: https://www.eckharttollenow.com/v9/join/\n\nCheck out some of our other playlist:\nMeditation - https://bit.ly/2QkG5uU\nOur True Identity - https://bit.ly/2COKGTo\nSupporting Awakening - https://bit.ly/2O4M6dW\nDaily Life - https://bit.ly/2O70SRp\nConversations with Guests - https://bit.ly/2MiB2Ig\n\nConnect with us elsewhere:\nhttp://www.EckhartTolleNow.com\nhttps://www.facebook.com/Eckharttolle\nhttp://www.instagram.com/eckharttolle\nhttps://twitter.com/EckhartTolle\nhttp://pinterest.com/eckharttolle\n\nEckhart Tolle is a spiritual teacher and author, born in Germany and educated at the Universities of London and Cambridge. At the age of 29 a profound inner transformation radically changed the course of his life. He devoted the next several years to understanding, integrating, and deepening that transformation. With his international bestsellers, The Power of Now and A New Earth—translated into over 52 languages—he has introduced millions to the joy and freedom of living life in the present moment. The New York Times has described him as “the most popular spiritual author in the United States”, and Watkins Review has named him “the most spiritually influential person in the world.”\n\nEckhart’s profound, yet simple teachings have helped countless people around the globe experience a state of vibrantly alive inner peace in their daily lives. His teachings focus on awakening consciousness, which transcends ego and discursive thinking, and can be seen as the next step in human evolution. In the awakened state of presence, we discover what Eckhart describes as our essential identity—who we are beneath the surface—and its power for transforming our selves and our world.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/uEk7SDBkiHg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/uEk7SDBkiHg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/uEk7SDBkiHg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/uEk7SDBkiHg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/uEk7SDBkiHg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Eckhart Tolle",
        "playlistId": "PLEguIFSuqm6gq3j2h8wvBXJSVq-MhE5VF",
        "position": 64,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "uEk7SDBkiHg"
        }
      },
      "contentDetails": {
        "videoId": "uEk7SDBkiHg",
        "videoPublishedAt": "2020-07-03T16:00:17Z"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 65,
    "resultsPerPage": 50
  }
}

  recorded_at: Tue, 07 Jul 2020 03:11:57 GMT
recorded_with: VCR 6.0.0
